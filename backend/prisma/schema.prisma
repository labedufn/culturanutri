generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoUsuario {
  ADMINISTRADOR
  AVALIADOR
}

model Gestores {
  id                 String          @id @default(uuid())
  id_estabelecimento String
  data_cadastro      DateTime        @default(now()) @db.Timestamptz(3)
  data_alteracao     DateTime        @updatedAt @db.Timestamptz(3)
  informacoes        String          @db.Text
  ativo              Int             @default(1)
  estabelecimento    Estabelecimento @relation(fields: [id_estabelecimento], references: [id])

  @@map("gestores")
}

model ManipuladorAlimento {
  id                 String          @id @default(uuid())
  id_estabelecimento String
  data_cadastro      DateTime        @default(now()) @db.Timestamptz(3)
  data_alteracao     DateTime        @updatedAt @db.Timestamptz(3)
  informacoes        String          @db.Text
  ativo              Int             @default(1)
  estabelecimento    Estabelecimento @relation(fields: [id_estabelecimento], references: [id])

  @@map("manipuladores_alimentos")
}

model ListaVerificacao {
  id                 String          @id @default(uuid())
  informacoes        String          @db.Text
  id_estabelecimento String
  ativo              Int             @default(1)
  data_cadastro      DateTime        @default(now()) @db.Timestamptz(3)
  data_alteracao     DateTime        @updatedAt @db.Timestamptz(3)
  estabelecimento    Estabelecimento @relation(fields: [id_estabelecimento], references: [id])

  @@map("listas_verificacoes")
}

model TabelaAuxiliar {
  id                       String @id @default(uuid())
  codigo_tabela            Int
  descricao                String @db.VarChar(255)
  item_tabela              Int
  id_listas_verificacoes   String
  id_triangulacoes         String
  id_analises_qualitativas String
  id_resultados            String

  @@map("tabelas_auxiliares")
}

model AnaliseQualitativa {
  id                 String          @id @default(uuid())
  id_estabelecimento String
  informacoes        String          @db.Text
  data_cadastro      DateTime        @default(now()) @db.Timestamptz(3)
  data_alteracao     DateTime        @updatedAt @db.Timestamptz(3)
  estabelecimento    Estabelecimento @relation(fields: [id_estabelecimento], references: [id])
  ativo              Int             @default(1)

  Triangulacao Triangulacao[]

  @@map("analises_qualitativas")
}

model Triangulacao {
  id                      String              @id @default(uuid())
  id_analise_qualitativa  String
  id_analise_quantitativa String
  informacoes             String              @db.Text
  data_cadastro           DateTime            @default(now()) @db.Timestamptz(3)
  data_alteracao          DateTime            @updatedAt @db.Timestamptz(3)
  analiseQualitativa      AnaliseQualitativa  @relation(fields: [id_analise_qualitativa], references: [id])
  analiseQuantitativa     AnaliseQuantitativa @relation(fields: [id_analise_quantitativa], references: [id])

  Resultado Resultado[]

  @@map("triangulacoes")
}

model Resultado {
  id                 String          @id @default(uuid())
  id_estabelecimento String
  id_triangulacao    String
  triangulacao       Triangulacao    @relation(fields: [id_triangulacao], references: [id])
  estabelecimento    Estabelecimento @relation(fields: [id_estabelecimento], references: [id])

  @@map("resultados")
}

model AnaliseQuantitativa {
  id                                     String          @id @default(uuid())
  id_estabelecimento                     String
  caracteristicas_socio_demograficas     String          @db.Text
  resultados_avaliacao_quantitativas_csa String          @db.Text
  vies_otimista                          String          @db.Text
  data_cadastro                          DateTime        @default(now()) @db.Timestamptz(3)
  data_alteracao                         DateTime        @updatedAt @db.Timestamptz(3)
  ativo                                  Int             @default(1)
  estabelecimento                        Estabelecimento @relation(fields: [id_estabelecimento], references: [id])
  Triangulacao                           Triangulacao[]

  @@map("analises_quantitativas")
}

model Estabelecimento {
  id                               String   @id @default(uuid())
  nome                             String   @db.VarChar(255)
  cnae                             String   @db.VarChar(255)
  endereco                         String   @db.VarChar(255)
  pessoal_ocupado                  Int
  numero_refeicoes                 Int
  possui_alvara_sanitario          Int
  possui_responsavel_boas_praticas Int
  data_criacao                     DateTime @default(now()) @db.Timestamptz(3)
  data_alteracao                   DateTime @updatedAt @db.Timestamptz(3)
  alterado_por                     String
  ativo                            Int      @default(1)
  usuario                          Usuario  @relation(fields: [alterado_por], references: [id])

  Resultado           Resultado[]
  AnaliseQuantitativa AnaliseQuantitativa[]
  AnaliseQualitativa  AnaliseQualitativa[]
  ListaVerificacao    ListaVerificacao[]
  ManipuladorAlimento ManipuladorAlimento[]
  Gestores            Gestores[]

  @@map("estabelecimentos")
}

model Usuario {
  id             String      @id @default(uuid())
  nome           String      @db.VarChar(255)
  sobrenome      String      @db.VarChar(255)
  cpf            String      @db.VarChar(255)
  email          String      @unique @db.VarChar(255)
  instituicao    String      @db.VarChar(255)
  tipo_usuario   TipoUsuario
  senha          String      @db.VarChar(255)
  ativo          Int         @default(1)
  data_cadastro  DateTime    @default(now()) @db.Timestamptz(3)
  data_alteracao DateTime    @updatedAt @db.Timestamptz(3)
  ultimo_login   DateTime    @updatedAt @db.Timestamptz(3)

  ResetSenhaToken ResetSenhaToken[]
  CadastroToken   CadastroToken[]
  estabelecimento Estabelecimento[]

  @@map("usuarios")
}

model ResetSenhaToken {
  id         String   @id @default(uuid())
  token      String   @unique
  id_usuario String
  usado      Int      @default(0)
  expira_em  DateTime @db.Timestamptz(3)
  criado_em  DateTime @default(now()) @db.Timestamptz(3)
  usuario    Usuario  @relation(fields: [id_usuario], references: [id])

  @@map("reset_senhas_tokens")
}

model CadastroToken {
  id           String      @id @default(uuid())
  token        String      @unique
  email        String
  tipo_usuario TipoUsuario
  criado_por   String
  usado        Int         @default(0)
  expira_em    DateTime    @db.Timestamptz(3)
  criado_em    DateTime    @default(now()) @db.Timestamptz(3)
  usuario      Usuario     @relation(fields: [criado_por], references: [id])

  @@map("cadastros_tokens")
}
